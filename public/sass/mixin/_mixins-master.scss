// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

@mixin spacepad($value) {
    padding-top: $value;
    padding-bottom: $value;
}

@mixin spacepad-sides($value) {
    padding-top: $value;
    padding-bottom: $value;
    padding-left: $value;
    padding-right: $value;
}

@mixin spacepad-nosides($value) {
    padding-top: $value;
    padding-bottom: $value;
    padding-left: 0;
    padding-right: 0;
}

@mixin spacemar($value) {
    margin-top: $value;
    margin-bottom: $value;
}

@mixin spacemar-nosides($value) {
    margin-top: $value;
    margin-bottom: $value;
    margin-left: 0;
    margin-right: 0;
}

@mixin nosides($args) {
    #{$args}-left: 0;
    #{$args}-right: 0;
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

@mixin transform($args...) {
    -webkit-transform: translate($args);
    -moz-transform: translate($args);
    -ms-transform: translate($args);
    -o-transform: translate($args);
    transform: translate($args);
}

/* ========================================================
 * replacing media queries
 * format: @include breakpoint(['xs','md', or 'lg'])
 * ======================================================== */
@mixin breakpoint($class) {
    @if $class==xs {
        @media (max-width: 767px) {
            @content;
        }
    }
    @else if $class==sm {
        @media (min-width: 768px) {
            @content;
        }
    }
    @else if $class==md {
        @media (min-width: 992px) {
            @content;
        }
    }
    @else if $class==lg {
        @media (min-width: 1200px) {
            @content;
        }
    }
    @else {
        @warn "Breakpoint mixin supports: xs, sm, md, lg";
    }
}


/* ========================================================
 * FONT FACE
 * format: @include font-face($fontname, $fontpath)
 * ======================================================== */
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
    $src: null;

    $extmods: (
        eot: "?",
        svg: "#" + str-replace($name, " ", "_")
    );

    $formats: (
        otf: "opentype",
        ttf: "truetype"
    );

    @each $ext in $exts {
        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
    }

    @font-face {
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
    }
}


/* ========================================================
 * calculate rem size based on px size
 * ======================================================== */
    // @function calculateRem($size) {
    //     $remSize: $size / 16px;
    //     @return $remSize * 1rem;
    // }

    // @mixin font-size($size) {
    //     font-size: $size;
    //     font-size: calculateRem($size);
    // }

// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
    font-size: ($sizeValue * 16) * 1px;
    font-size: $sizeValue * 1rem;
}
